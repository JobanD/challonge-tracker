---
import Layout from "../layouts/Layout.astro";
import { canonicalName, titleCase } from "../utils/players";

const auth = btoa(
    `${import.meta.env.CHALLONGE_USERNAME}:${import.meta.env.CHALLONGE_API_KEY}`,
);

const tournamentsRes = await fetch(
    "https://api.challonge.com/v1/tournaments.json",
    {
        headers: {
            Authorization: `Basic ${auth}`,
            Accept: "application/json",
        },
    },
);

const tournaments = await tournamentsRes.json();

const wjetTournaments = tournaments.filter((t) =>
    t.tournament.name.toLowerCase().includes("wjet"),
);

let globalStats: Record<
    string,
    {
        name: string;
        matches: number;
        wins: number;
        losses: number;
        rings: number;

        dbMatches: number;
        dbWins: number;
        dbLosses: number;
        dbRings: number;
    }
> = {};

await Promise.all(
    wjetTournaments.map(async (t) => {
        const tid = t.tournament.id;

        const [participantsRes, matchesRes] = await Promise.all([
            fetch(
                `https://api.challonge.com/v1/tournaments/${tid}/participants.json`,
                {
                    headers: {
                        Authorization: `Basic ${auth}`,
                        Accept: "application/json",
                    },
                },
            ),
            fetch(
                `https://api.challonge.com/v1/tournaments/${tid}/matches.json`,
                {
                    headers: {
                        Authorization: `Basic ${auth}`,
                        Accept: "application/json",
                    },
                },
            ),
        ]);

        const participants = await participantsRes.json();
        const matches = await matchesRes.json();

        const idToName = Object.fromEntries(
            participants.map((p) => [p.participant.id, p.participant.name]),
        );

        const isDbTournament = t.tournament.name.toLowerCase().includes("db");

        matches.forEach((m) => {
            const { player1_id, player2_id, winner_id } = m.match;

            [player1_id, player2_id].forEach((pid) => {
                const name = canonicalName(idToName[pid] ?? `Unknown (${pid})`);

                if (!globalStats[name]) {
                    globalStats[name] = {
                        name,
                        matches: 0,
                        wins: 0,
                        losses: 0,
                        rings: 0,
                        dbMatches: 0,
                        dbWins: 0,
                        dbLosses: 0,
                        dbRings: 0,
                    };
                }

                if (isDbTournament) {
                    globalStats[name].dbMatches += 1;
                } else {
                    globalStats[name].matches += 1;
                }
            });

            if (winner_id) {
                const winnerName = canonicalName(
                    idToName[winner_id] ?? `Unknown (${winner_id})`,
                );
                if (isDbTournament) {
                    globalStats[winnerName].dbWins += 1;
                } else {
                    globalStats[winnerName].wins += 1;
                }
            }

            const loser_id = [player1_id, player2_id].find(
                (pid) => pid !== winner_id,
            );
            if (loser_id) {
                const loserName = canonicalName(
                    idToName[loser_id] ?? `Unknown (${loser_id})`,
                );
                if (isDbTournament) {
                    globalStats[loserName].dbLosses += 1;
                } else {
                    globalStats[loserName].losses += 1;
                }
            }
        });

        const tournamentWinner = participants.find(
            (p) => p.participant.final_rank === 1,
        );
        if (tournamentWinner) {
            const winnerName = canonicalName(tournamentWinner.participant.name);
            if (!globalStats[winnerName]) {
                globalStats[winnerName] = {
                    name: winnerName,
                    matches: 0,
                    wins: 0,
                    losses: 0,
                    rings: 0,
                    dbMatches: 0,
                    dbWins: 0,
                    dbLosses: 0,
                    dbRings: 0,
                };
            }

            if (isDbTournament) {
                globalStats[winnerName].dbRings += 1;
            } else {
                globalStats[winnerName].rings += 1;
            }
        }
    }),
);

const allPlayers = Object.values(globalStats).map((p) => {
    const winPct = p.matches > 0 ? (p.wins / p.matches) * 100 : 0;
    const dbWinPct = p.dbMatches > 0 ? (p.dbWins / p.dbMatches) * 100 : 0;

    return {
        ...p,
        winPct,
        dbWinPct,
    };
});

// Sort by rings then win %
const sortedNormal = allPlayers
    .filter((p) => p.matches > 0)
    .sort((a, b) => b.rings - a.rings || b.winPct - a.winPct);

const sortedDb = allPlayers
    .filter((p) => p.dbMatches > 0)
    .sort((a, b) => b.dbRings - a.dbRings || b.dbWinPct - a.dbWinPct);
---

<Layout>
    <h1>Player Stats (All WJET Tournaments)</h1>
    <a href="/">‚Üê Back to Home</a>

    <h2>Regular Tournaments</h2>
    <div class="table-container">
        <table id="normal-table">
            <thead>
                <tr>
                    <th>Player</th>
                    <th>Rings</th>
                    <th>Win %</th>
                    <th>Matches</th>
                    <th>Wins</th>
                    <th>Losses</th>
                </tr>
            </thead>
            <tbody>
                {
                    sortedNormal.map((player) => (
                        <tr>
                            <td>{titleCase(player.name)}</td>
                            <td>{player.rings}</td>
                            <td>{player.winPct.toFixed(1)}%</td>
                            <td>{player.matches}</td>
                            <td>{player.wins}</td>
                            <td>{player.losses}</td>
                        </tr>
                    ))
                }
            </tbody>
        </table>
    </div>

    <h2>DB Tournaments</h2>
    <div class="table-container">
        <table id="db-table">
            <thead>
                <tr>
                    <th>Player</th>
                    <th>DB Rings</th>
                    <th>DB Win %</th>
                    <th>DB Matches</th>
                    <th>DB Wins</th>
                    <th>DB Losses</th>
                </tr>
            </thead>
            <tbody>
                {
                    sortedDb.map((player) => (
                        <tr>
                            <td>{titleCase(player.name)}</td>
                            <td>{player.dbRings}</td>
                            <td>{player.dbWinPct.toFixed(1)}%</td>
                            <td>{player.dbMatches}</td>
                            <td>{player.dbWins}</td>
                            <td>{player.dbLosses}</td>
                        </tr>
                    ))
                }
            </tbody>
        </table>
    </div>
</Layout>
